from pathlib import Path
from typing import Dict, Any, Union, Tuple

import yaml

from .patterns import Patterns


mod_path = Path(__file__).parent


class Config:
    def __init__(self) -> None:
        """
        One stop shop for all configuration used by datagenius. Customize to
        change core functionality.
        """
        self._patterns = Patterns()
        raw = self._load_config()
        self._name_columns = tuple(raw.get("name_columns", []))
        self._env = "prod"

    @property
    def env(self) -> str:
        return self._env

    @env.setter
    def env(self, env: str) -> None:
        if env in ("prod", "test"):
            self._env = env
        else:
            raise ValueError(
                f"Config.env must be one of 'prod' or 'test'. Passed {env}"
            )

    @property
    def patterns(self) -> Patterns:
        """
        Returns:
            Patterns: The Patterns object used by the names package to parse
                names.
        """
        return self._patterns

    @property
    def name_column_labels(self) -> Tuple[str, str, str, str, str]:
        """
        Returns:
            Tuple[str, str, str, str, str]: The labels for the five name strings
                generated by parse_name_string_column and parse_tokenized_names
                transmutations (default is prefix, fname, mname, lname, suffix)
        """
        return self._name_columns

    @name_column_labels.setter
    def name_column_labels(self, value: Tuple[str, str, str, str, str]) -> None:
        if len(value) != 5:
            raise ValueError("name_column_labels must be a tuple of length 5.")
        if isinstance(value, tuple):
            for v in value:
                if not isinstance(v, str):
                    raise ValueError(
                        f"All elements of name_column_labels must be strings. {v} is "
                        f"type {type(v)}"
                    )
            self._name_columns = value
        else:
            raise ValueError(
                "name_column_labels must be a tuple. Passed value type is "
                f"{type(value)}"
            )

    def add_custom_pattern_file(self, p: Union[str, Path]) -> None:
        """
        Add a custom yaml file with name patterns unique to your dataset. You can
        supply any of the properties of GConfig.patterns as keys in the yaml,
        and then any strings as list values for those keys.

        Args:
            p (Union[str, Path]): The path to your custom yaml file.
        """
        p = Path(p)
        self._patterns.add_custom_pattern_file(p)

    @classmethod
    def _load_config(cls) -> Dict[str, Any]:
        """
        Loads datagenius' general config file.

        Returns:
            Dict[str, Any]: A dictionary containing keys matching GConfig
                properties and values to assign to those properties.
        """
        p = mod_path.joinpath("_config_files/config.yml").resolve()
        with open(p, "r") as r:
            results = yaml.load(r, Loader=yaml.Loader)
        return results
