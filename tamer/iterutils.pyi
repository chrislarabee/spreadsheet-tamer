from typing import (
    Any,
    Sequence,
    Union,
    overload,
    Tuple,
    List,
    Set,
    Dict,
    Iterable,
    Callable,
    Type,
    MutableSequence,
)

def broadcast_affix(x: Iterable[str], affix: str, pos: int = -1) -> Iterable[str]: ...
def broadcast_type(
    x: Iterable[Any], type_func: Union[Callable[[Any], Any], Type]
) -> Iterable[Any]: ...
def collect_by_keys(x: Dict[Any, Any], *keys: Any) -> Dict[Any, Any]: ...
def gen_alpha_keys(num: int) -> List[str]: ...
@overload
def tuplify(value: Union[str, Sequence[str]]) -> Tuple[str, ...]: ...
@overload
def tuplify(value: Union[int, Sequence[int]]) -> Tuple[int, ...]: ...
@overload
def tuplify(value: Union[float, Sequence[float]]) -> Tuple[float, ...]: ...
@overload
def tuplify(value: Union[List[Any], Set[Any]]) -> Tuple[Any, ...]: ...
@overload
def tuplify(value: Dict[Any, Any]) -> Tuple[Tuple[Any, Any], ...]: ...
@overload
def tuplify(value=None) -> Tuple[None]: ...
def tuplify_iterable(
    value: Union[Dict[Any, Any], MutableSequence[Any]]
) -> Union[Dict[Any, Tuple[Any]], MutableSequence[Tuple[Any]]]: ...
def withinplus(within: Iterable, *values: Any) -> bool: ...
